
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OOPs Concepts in C#</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: space-between;
        }

        .container {
            width: 75%;
            margin: auto;
            padding: 20px;
        }

        .advertisement {
            width: 20%;
            padding: 20px;
            background-color: #f4f4f4;
            border-left: 2px solid #ccc;
        }

        .content {
            margin-left: 10%;
            text-align: center;
        }

        h1 {
            color: #333;
            text-align: center;
        }

        ul {
            list-style-type: none;
            padding: 0;
            text-align: center;
        }

            ul li {
                padding: 5px 0;
            }

                ul li a {
                    text-decoration: none;
                    color: #0066cc;
                    font-weight: bold;
                }

                    ul li a:hover {
                        color: #ff6600;
                    }

        .topic-section {
            margin: 50px 0;
        }
    </style>
</head>
<body>

    <div class="container">
        <h1>OOPs Concepts in C#</h1>

        <ul>
            <li><a href="#abstraction">Abstraction</a></li>
            <li><a href="#encapsulation">Encapsulation</a></li>
            <li><a href="#inheritance">Inheritance</a></li>
            <li><a href="#polymorphism">Polymorphism</a></li>
        </ul>

        <div class="content">
            <div id="abstraction" class="topic-section">
                <h2>Abstraction</h2>
                <p>
                    Abstraction is the concept of hiding the internal details and showing only the functionality to the user.
                    In C#, abstraction is achieved using abstract classes and interfaces.
                </p>
            </div>

            <div id="encapsulation" class="topic-section">
                <h2>Encapsulation</h2>
                <p>
                    Encapsulation is the technique of keeping data and the methods that manipulate that data together as a single unit.
                    It restricts direct access to some of an object's components.
                </p>
            </div>

            <div id="inheritance" class="topic-section">
                <h2>Inheritance</h2>
                <p>
                    Inheritance is a mechanism where a new class is derived from an existing class.
                    The derived class inherits the members (fields, methods, etc.) of the base class.
                </p>
            </div>

            <div id="polymorphism" class="topic-section">
                <h2>Polymorphism</h2>
                <p>
                    Polymorphism allows one interface to be used for a general class of actions.
                    The specific action is determined by the exact nature of the situation.
                    In C#, polymorphism is of two types: Compile-time (method overloading) and Runtime (method overriding).
                </p>
            </div>
        </div>
    </div>

    <div class="advertisement">
        <h3>Advertisement</h3>
        <p>Place your ad here.</p>
    </div>

</body>
</html>
