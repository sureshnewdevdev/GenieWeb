@{
    ViewData["Title"] = "OOP Concepts in C# .NET Core - Interview and MCQ Questions";
}

<!-- Content Section -->
<div class="container-fluid mt-3">
    <div class="row">
        <div class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
            <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                <h1 class="h2">Understanding Object-Oriented Programming (OOP) in C# .NET Core</h1>
            </div>

            <p class="lead">Dive deep into OOP concepts with this collection of 10 interview questions and 20 multiple-choice questions, designed for both beginners and intermediate developers.</p>

            <!-- Main Content -->
            <!-- Interview Questions Section -->
            <section class="mt-5">
                <h2>  Interview Questions on OOP Concepts</h2>
                <ol>
                    <li>
                        <h5>What is Object-Oriented Programming (OOP)?</h5>
                        <p><strong>Answer:</strong> OOP is a programming paradigm based on the concept of "objects", which can contain data and code. Data is represented by fields (attributes) and code is represented by methods. The four main principles of OOP are Encapsulation, Abstraction, Inheritance, and Polymorphism.</p>
                    </li>
                    <li>
                        <h5>What is Encapsulation? Give an example in C#.</h5>
                        <p><strong>Answer:</strong> Encapsulation is the process of wrapping data and the methods that operate on that data into a single unit or class, and restricting access to some of the object's components. In C#, it is achieved by using access modifiers like <code>private</code> or <code>protected</code> to hide data from the outside world.</p>
                        <pre class="bg-light p-3">
public class Employee {
    private string name;  // private variable

    public void SetName(string empName) {
        name = empName;  // setting name using method
    }

    public string GetName() {
        return name;  // retrieving name using method
    }
}
                        </pre>
                    </li>
                    <li>
                        <h5>Explain Inheritance with an example.</h5>
                        <p><strong>Answer:</strong> Inheritance allows a class to derive properties and behaviors from a parent class. It promotes code reusability. In C#, it is implemented using the colon (<code>:</code>) symbol.</p>
                        <pre class="bg-light p-3">
public class Person {
    public string name;
    public void Greet() {
        Console.WriteLine("Hello!");
    }
}

public class Student : Person {  // Inheriting from Person
    public int studentID;
}

class Program {
    static void Main() {
        Student s = new Student();
        s.name = "John";  // Accessing inherited member
        s.Greet();  // Calling inherited method
    }
}
                        </pre>
                    </li>
                    <li>
                        <h5>What is Polymorphism? Explain with an example.</h5>
                        <p><strong>Answer:</strong> Polymorphism means "many forms" and allows objects of different classes to be treated as objects of a common superclass. In C#, polymorphism is typically achieved through method overriding or method overloading.</p>
                        <pre class="bg-light p-3">
public class Animal {
    public virtual void Speak() {
        Console.WriteLine("The animal makes a sound");
    }
}

public class Dog : Animal {
    public override void Speak() {
        Console.WriteLine("The dog barks");
    }
}

public class Cat : Animal {
    public override void Speak() {
        Console.WriteLine("The cat meows");
    }

class Program {
    static void Main() {
        Animal myDog = new Dog();
        myDog.Speak();  // Outputs: The dog barks
    }
}
                        </pre>
                    </li>
                    <li>
                        <h5>Define Abstraction and provide an example.</h5>
                        <p><strong>Answer:</strong> Abstraction hides the complex reality while exposing only the necessary parts. It reduces complexity by hiding unnecessary implementation details. In C#, abstraction is achieved using abstract classes or interfaces.</p>
                        <pre class="bg-light p-3">
public abstract class Vehicle {
    public abstract void Start();
}

public class Car : Vehicle {
    public override void Start() {
        Console.WriteLine("Car starts with a key");
    }
}

class Program {
    static void Main() {
        Vehicle vehicle = new Car();
        vehicle.Start();  // Outputs: Car starts with a key
    }
}
                        </pre>
                    </li>
                    <li>
                        <h5>Explain method overloading and method overriding with examples.</h5>
                        <p><strong>Answer:</strong> Method overloading allows multiple methods with the same name but different parameters within a class. Method overriding allows a subclass to provide a specific implementation of a method already defined in its parent class.</p>
                        <pre class="bg-light p-3">
// Method Overloading
public class MathOperations {
    public int Add(int a, int b) {
        return a + b;
    }
    public int Add(int a, int b, int c) {
        return a + b + c;
    }
}

// Method Overriding
public class Animal {
    public virtual void Speak() {
        Console.WriteLine("Animal speaks");
    }
}

public class Dog : Animal {
    public override void Speak() {
        Console.WriteLine("Dog barks");
    }
}
                        </pre>
                    </li>
                    <li>
                        <h5>What is the role of constructors in C#?</h5>
                        <p><strong>Answer:</strong> A constructor is a special method used to initialize an object of a class. It sets initial values for the object's fields. In C#, constructors have the same name as the class and do not have a return type.</p>
                    </li>
                    <li>
                        <h5>What are access modifiers in C#?</h5>
                        <p><strong>Answer:</strong> Access modifiers define the visibility and accessibility of classes, methods, and other members. C# provides the following access modifiers: <code>public</code>, <code>private</code>, <code>protected</code>, and <code>internal</code>.</p>
                    </li>
                    <li>
                        <h5>Explain the difference between a class and an object in C#.</h5>
                        <p><strong>Answer:</strong> A class is a blueprint for creating objects, defining data and behavior. An object is an instance of a class that is created at runtime.</p>
                    </li>
                    <li>
                        <h5>What is an interface in C#? How is it different from an abstract class?</h5>
                        <p><strong>Answer:</strong> An interface defines a contract by specifying method signatures without implementation. Unlike abstract classes, interfaces cannot contain fields or method implementations (prior to C# 8.0).</p>
                    </li>
                    <!-- Add more interview questions as needed, up to 20 -->
                    <li>
                        <h5>What is .NET Core and how does it differ from the .NET Framework?</h5>
                        <p><strong>Answer:</strong> .NET Core is a cross-platform, open-source framework for building modern applications. It differs from the .NET Framework in that .NET Core supports cross-platform development (Windows, Linux, macOS), whereas .NET Framework is Windows-specific. .NET Core also offers better performance and is modular.</p>
                        <pre class="bg-light p-3">
// Example: A simple .NET Core Console Application
using System;

class Program {
    static void Main() {
        Console.WriteLine("Hello, .NET Core!");
    }
}
        </pre>
                    </li>
                    <li>
                        <h5>Explain Dependency Injection (DI) in .NET Core.</h5>
                        <p><strong>Answer:</strong> Dependency Injection (DI) is a technique in which an object receives its dependencies from an external source rather than creating them itself. In .NET Core, DI is built-in and is configured via the `Startup` class.</p>
                        <pre class="bg-light p-3">
// Example: Simple Dependency Injection in .NET Core
public interface IMessageService {
    void SendMessage(string message);
}

public class EmailService : IMessageService {
    public void SendMessage(string message) {
        Console.WriteLine("Sending Email: " + message);
    }
}

public class HomeController {
    private readonly IMessageService _messageService;

    public HomeController(IMessageService messageService) {
        _messageService = messageService;
    }

    public void NotifyUser() {
        _messageService.SendMessage("Hello User!");
    }
}

// In Startup.cs
public void ConfigureServices(IServiceCollection services) {
    services.AddTransient<IMessageService, EmailService>();
}
        </pre>
                    </li>
                    <li>
                        <h5>What is Middleware in .NET Core?</h5>
                        <p><strong>Answer:</strong> Middleware in .NET Core is software that is assembled into an application pipeline to handle requests and responses. Each middleware component in the pipeline can either pass the request to the next middleware or handle the request itself.</p>
                        <pre class="bg-light p-3">
// Example: Custom Middleware in .NET Core
public class LoggingMiddleware {
    private readonly RequestDelegate _next;

    public LoggingMiddleware(RequestDelegate next) {
        _next = next;
    }

    public async Task Invoke(HttpContext context) {
        Console.WriteLine($"Request URL: {context.Request.Path}");
        await _next(context);
    }
}

// In Startup.cs
public void Configure(IApplicationBuilder app) {
    app.UseMiddleware<LoggingMiddleware>();
    app.UseRouting();
    app.UseEndpoints(endpoints => {
        endpoints.MapControllers();
    });
}
        </pre>
                    </li>

                    <li>
                        <h5>How is routing handled in .NET Core MVC?</h5>
                        <p><strong>Answer:</strong> In .NET Core MVC, routing is handled via the `Startup` class using `UseRouting()` and `UseEndpoints()`. Routes define how URLs are mapped to controller actions, typically configured in the `Startup.cs` file.</p>
                        <pre class="bg-light p-3">
// Example: Route Configuration in .NET Core
public void Configure(IApplicationBuilder app) {
    app.UseRouting();
    app.UseEndpoints(endpoints => {
        endpoints.MapControllerRoute(
            name: "default",
            pattern: "{controller=Home}/{action=Index}/{id?}");
    });
}

// In HomeController.cs
public class HomeController : Controller {
    public IActionResult Index() {
        return View();
    }
}
        </pre>
                    </li>
                    <li>
                        <h5>What is Entity Framework Core (EF Core) and how is it used in .NET Core?</h5>
                        <p><strong>Answer:</strong> Entity Framework Core (EF Core) is a lightweight, open-source ORM (Object-Relational Mapper) for .NET Core. It allows developers to work with a database using .NET objects, eliminating most of the data-access code.</p>
                        <pre class="bg-light p-3">
// Example: Using EF Core in .NET Core
public class ApplicationDbContext : DbContext {
    public DbSet<Product> Products { get; set; }

    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options) { }
}

public class Product {
    public int Id { get; set; }
    public string Name { get; set; }
    public decimal Price { get; set; }
}

// In Startup.cs
public void ConfigureServices(IServiceCollection services) {
    services.AddDbContext<ApplicationDbContext>(options =>
        options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection")));
}
        </pre>
                    </li>

                    <li>
                        <h5>Explain the difference between `IActionResult` and `ActionResult<T>` in .NET Core.</h5>
                        <p><strong>Answer:</strong> `IActionResult` is a general return type for an action method, representing various HTTP responses. `ActionResult<T>` is a specific version introduced in .NET Core 2.1 that allows for returning both the response and a strongly typed model.</p>
                        <pre class="bg-light p-3">
// Example: Using IActionResult vs ActionResult<T> in .NET Core
public IActionResult GetOldMethod() {
    return View();  // IActionResult returns a view
}

public ActionResult<Product> GetNewMethod() {
    return new Product { Id = 1, Name = "Sample", Price = 9.99M };  // ActionResult<Product>
}
        </pre>
                    </li>



                    <li>
                        <h5>What is Kestrel in .NET Core?</h5>
                        <p><strong>Answer:</strong> Kestrel is the default cross-platform web server used in ASP.NET Core. It is lightweight, fast, and supports asynchronous I/O operations. Kestrel can run as a standalone server or be used behind another server like IIS or Nginx.</p>
                        <pre class="bg-light p-3">
// Example: Configuring Kestrel in .NET Core
public class Program {
    public static void Main(string[] args) {
        CreateHostBuilder(args).Build().Run();
    }

    public static IHostBuilder CreateHostBuilder(string[] args) =>
        Host.CreateDefaultBuilder(args)
            .ConfigureWebHostDefaults(webBuilder => {
                webBuilder.UseKestrel();  // Using Kestrel server
                webBuilder.UseStartup<Startup>();
            });
}
        </pre>
                    </li>

                    <li>
                        <h5>How do you handle configuration in .NET Core?</h5>
                        <p><strong>Answer:</strong> Configuration in .NET Core is managed using JSON, environment variables, command-line arguments, and more. The `appsettings.json` file is commonly used for configuration, and environment-specific configurations can be loaded using `appsettings.Development.json` or other environments.</p>
                        <pre class="bg-light p-3">
// Example: Reading configuration in .NET Core
public class Startup {
    private readonly IConfiguration _configuration;

    public Startup(IConfiguration configuration) {
        _configuration = configuration;
    }

    public void ConfigureServices(IServiceCollection services) {
        var mySetting = _configuration["MySetting"];  // Reading a setting from appsettings.json
    }
}

// In appsettings.json
{
  "MySetting": "Hello, Configuration!"
}
        </pre>
                    </li>

                    <li>
                        <h5>Explain Model Binding in .NET Core MVC.</h5>
                        <p><strong>Answer:</strong> Model Binding in .NET Core MVC automatically maps HTTP request data (such as form fields, query strings, or route parameters) to the action method parameters. This simplifies data handling by directly converting input to strongly typed models.</p>
                        <pre class="bg-light p-3">
// Example: Model Binding in .NET Core MVC
public class UserModel {
    public string Name { get; set; }
    public int Age { get; set; }
}

[HttpPost]
public IActionResult CreateUser(UserModel user) {
    // Model Binding automatically binds form data to UserModel
    return Ok($"User {user.Name}, Age {user.Age} created.");
}
        </pre>
                    </li>
                    <li>
                        <h5>What is the purpose of the `ConfigureServices` method in the `Startup` class?</h5>
                        <p><strong>Answer:</strong> The `ConfigureServices` method in the `Startup` class is used to add services to the application's dependency injection container. Services such as MVC, Razor Pages, or custom services are configured here.</p>
                        <pre class="bg-light p-3">
// Example: ConfigureServices in Startup.cs
public void ConfigureServices(IServiceCollection services) {
    services.AddControllers();
    services.AddDbContext<ApplicationDbContext>(options =>
        options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection")));
}
        </pre>
                    </li>

                    <li>
                        <h5>How does .NET Core support logging?</h5>
                        <p><strong>Answer:</strong> .NET Core has built-in logging that supports various logging providers, such as Console, Debug, and third-party providers like Serilog or NLog. You can log messages at different levels (Information, Debug, Error, etc.).</p>
                        <pre class="bg-light p-3">
// Example: Logging in .NET Core
public class HomeController : Controller {
    private readonly ILogger<HomeController> _logger;

    public HomeController(ILogger<HomeController> logger) {
        _logger = logger;
    }

    public IActionResult Index() {
        _logger.LogInformation("This is an info log.");
        return View();
    }
}

// In Startup.cs
public void Configure(IApplicationBuilder app, ILoggerFactory loggerFactory) {
    loggerFactory.AddConsole();
    app.UseRouting();
}
        </pre>
                    </li>

                    <li>
                        <h5>Explain Global Exception Handling in .NET Core.</h5>
                        <p><strong>Answer:</strong> Global Exception Handling in .NET Core is typically done using middleware, where an exception handling middleware catches all unhandled exceptions in the request pipeline and returns a friendly error response.</p>
                        <pre class="bg-light p-3">
// Example: Global Exception Handling Middleware
public class ExceptionHandlingMiddleware {
    private readonly RequestDelegate _next;

    public ExceptionHandlingMiddleware(RequestDelegate next) {
        _next = next;
    }

    public async Task Invoke(HttpContext context) {
        try {
            await _next(context);
        } catch (Exception ex) {
            Console.WriteLine($"Exception caught: {ex.Message}");
            context.Response.StatusCode = 500;
            await context.Response.WriteAsync("An error occurred.");
        }
    }
}

// In Startup.cs
public void Configure(IApplicationBuilder app) {
    app.UseMiddleware<ExceptionHandlingMiddleware>();
}
        </pre>
                    </li>

                    <li>
                        <h5>How can you implement authorization in .NET Core?</h5>
                        <p><strong>Answer:</strong> Authorization in .NET Core is implemented using policies, roles, or claims-based mechanisms. The `Authorize` attribute is used to enforce authorization on controllers or actions.</p>
                        <pre class="bg-light p-3">
// Example: Role-based Authorization in .NET Core
[Authorize(Roles = "Admin")]
public IActionResult AdminOnly() {
    return View();
}

// In Startup.cs
public void ConfigureServices(IServiceCollection services) {
    services.AddAuthorization(options => {
        options.AddPolicy("AdminOnly", policy => policy.RequireRole("Admin"));
    });
}
        </pre>
                    </li>

                    <li>
                        <h5>What is `IHostedService` in .NET Core?</h5>
                        <p><strong>Answer:</strong> `IHostedService` is an interface in .NET Core used to create background tasks or services that run for the lifetime of the application. It is commonly used for tasks like sending emails, data processing, etc.</p>
                        <pre class="bg-light p-3">
// Example: Implementing IHostedService in .NET Core
public class TimedHostedService : IHostedService, IDisposable {
    private Timer _timer;

    public Task StartAsync(CancellationToken cancellationToken) {
        _timer = new Timer(DoWork, null, TimeSpan.Zero, TimeSpan.FromMinutes(1));
        return Task.CompletedTask;
    }

    private void DoWork(object state) {
        Console.WriteLine("Timed background task is running.");
    }

    public Task StopAsync(CancellationToken cancellationToken) {
        _timer?.Change(Timeout.Infinite, 0);
        return Task.CompletedTask;
    }

    public void Dispose() {
        _timer?.Dispose();
    }
}

// In Startup.cs
public void ConfigureServices(IServiceCollection services) {
    services.AddHostedService<TimedHostedService>();
}
        </pre>
                    </li>

                    <li>
                        <h5>How does .NET Core handle sessions?</h5>
                        <p><strong>Answer:</strong> In .NET Core, session management is done using middleware. Sessions allow you to store data across different HTTP requests from the same user, and session data is typically stored in-memory by default.</p>
                        <pre class="bg-light p-3">
// Example: Configuring Session in .NET Core
public void ConfigureServices(IServiceCollection services) {
    services.AddDistributedMemoryCache();
    services.AddSession(options => {
        options.IdleTimeout = TimeSpan.FromMinutes(30);
    });
}

public void Configure(IApplicationBuilder app) {
    app.UseSession();
    app.UseRouting();
}

// Using session in a controller
public class HomeController : Controller {
    public IActionResult Index() {
        HttpContext.Session.SetString("UserName", "JohnDoe");
        return View();
    }

    public IActionResult GetUserName() {
        var name = HttpContext.Session.GetString("UserName");
        return Ok(name);
    }
}
        </pre>
                    </li>

                    <li>
                        <h5>How do you implement CORS in .NET Core?</h5>
                        <p><strong>Answer:</strong> Cross-Origin Resource Sharing (CORS) in .NET Core is implemented to allow or deny resource requests from different domains. CORS can be configured globally or per controller using middleware.</p>
                        <pre class="bg-light p-3">
// Example: Configuring CORS in .NET Core
public void ConfigureServices(IServiceCollection services) {
    services.AddCors(options => {
        options.AddPolicy("AllowSpecificOrigin",
            builder => builder.WithOrigins("https://example.com")
                              .AllowAnyHeader()
                              .AllowAnyMethod());
    });
}

public void Configure(IApplicationBuilder app) {
    app.UseCors("AllowSpecificOrigin");
    app.UseRouting();
}
        </pre>
                    </li>

                    <li>
                        <h5>What is the purpose of `IOptions<T>` in .NET Core?</h5>
                        <p><strong>Answer:</strong> The `IOptions<T>` interface in .NET Core is used to access strongly typed configuration settings. It helps to bind configuration sections (like `appsettings.json`) to strongly typed objects, enabling easy configuration management.</p>
                        <pre class="bg-light p-3">
// Example: Using IOptions<T> in .NET Core
public class MySettings {
    public string SiteName { get; set; }
}

public class HomeController : Controller {
    private readonly MySettings _settings;

    public HomeController(IOptions<MySettings> settings) {
        _settings = settings.Value;
    }

    public IActionResult Index() {
        return Content($"Site Name: {_settings.SiteName}");
    }
}

// In Startup.cs
public void ConfigureServices(IServiceCollection services) {
    services.Configure<MySettings>(Configuration.GetSection("MySettings"));
}
        </pre>
                    </li>
          
                </ol>
            </section>

            <!-- MCQ Section -->
            <section class="mt-5">
                <h2>Multiple Choice Questions on OOP Concepts</h2>
                <form id="mcqForm">
                    <ol>
                        <!-- MCQ 1-3 (Existing Questions) -->
                        <li>
                            <h5>Which of the following is an OOP principle?</h5>
                            <div>
                                <input type="radio" name="q1" value="A"> A. Encapsulation<br>
                                <input type="radio" name="q1" value="B"> B. Inheritance<br>
                                <input type="radio" name="q1" value="C"> C. Polymorphism<br>
                                <input type="radio" name="q1" value="D"> D. All of the above<br>
                                <button type="button" class="btn btn-info mt-2" onclick="showAnswer(1)">Show Answer</button>
                                <span id="answer1" class="text-success" style="display: none;">Correct Answer: D</span>
                            </div>
                        </li>
                        <li>
                            <h5>What is the main purpose of encapsulation?</h5>
                            <div>
                                <input type="radio" name="q2" value="A"> A. To hide data from outside interference<br>
                                <input type="radio" name="q2" value="B"> B. To allow direct access to class fields<br>
                                <input type="radio" name="q2" value="C"> C. To increase performance<br>
                                <input type="radio" name="q2" value="D"> D. To create multiple instances of a class<br>
                                <button type="button" class="btn btn-info mt-2" onclick="showAnswer(2)">Show Answer</button>
                                <span id="answer2" class="text-success" style="display: none;">Correct Answer: A</span>
                            </div>
                        </li>
                        <li>
                            <h5>Which concept allows a subclass to inherit from a parent class?</h5>
                            <div>
                                <input type="radio" name="q3" value="A"> A. Encapsulation<br>
                                <input type="radio" name="q3" value="B"> B. Inheritance<br>
                                <input type="radio" name="q3" value="C"> C. Polymorphism<br>
                                <input type="radio" name="q3" value="D"> D. Abstraction<br>
                                <button type="button" class="btn btn-info mt-2" onclick="showAnswer(3)">Show Answer</button>
                                <span id="answer3" class="text-success" style="display: none;">Correct Answer: B</span>
                            </div>
                        </li>

                        <!-- Additional 17 MCQs -->
                        <li>
                            <h5>Which of the following is not a pillar of OOP?</h5>
                            <div>
                                <input type="radio" name="q4" value="A"> A. Encapsulation<br>
                                <input type="radio" name="q4" value="B"> B. Inheritance<br>
                                <input type="radio" name="q4" value="C"> C. Concurrency<br>
                                <input type="radio" name="q4" value="D"> D. Abstraction<br>
                                <button type="button" class="btn btn-info mt-2" onclick="showAnswer(4)">Show Answer</button>
                                <span id="answer4" class="text-success" style="display: none;">Correct Answer: C</span>
                            </div>
                        </li>
                        <li>
                            <h5>What does the 'this' keyword represent in C#?</h5>
                            <div>
                                <input type="radio" name="q5" value="A"> A. The current class<br>
                                <input type="radio" name="q5" value="B"> B. The current object instance<br>
                                <input type="radio" name="q5" value="C"> C. The parent class<br>
                                <input type="radio" name="q5" value="D"> D. The constructor<br>
                                <button type="button" class="btn btn-info mt-2" onclick="showAnswer(5)">Show Answer</button>
                                <span id="answer5" class="text-success" style="display: none;">Correct Answer: B</span>
                            </div>
                        </li>
                        <li>
                            <h5>Which of the following keywords is used to inherit a class in C#?</h5>
                            <div>
                                <input type="radio" name="q6" value="A"> A. implements<br>
                                <input type="radio" name="q6" value="B"> B. inherits<br>
                                <input type="radio" name="q6" value="C"> C. extends<br>
                                <input type="radio" name="q6" value="D"> D. : (colon)<br>
                                <button type="button" class="btn btn-info mt-2" onclick="showAnswer(6)">Show Answer</button>
                                <span id="answer6" class="text-success" style="display: none;">Correct Answer: D</span>
                            </div>
                        </li>
                        <li>
                            <h5>What keyword is used to define a class as a parent class in C#?</h5>
                            <div>
                                <input type="radio" name="q7" value="A"> A. base<br>
                                <input type="radio" name="q7" value="B"> B. new<br>
                                <input type="radio" name="q7" value="C"> C. abstract<br>
                                <input type="radio" name="q7" value="D"> D. parent<br>
                                <button type="button" class="btn btn-info mt-2" onclick="showAnswer(7)">Show Answer</button>
                                <span id="answer7" class="text-success" style="display: none;">Correct Answer: C</span>
                            </div>
                        </li>
                        <li>
                            <h5>Which of the following C# features is used to implement multiple inheritance?</h5>
                            <div>
                                <input type="radio" name="q8" value="A"> A. Interfaces<br>
                                <input type="radio" name="q8" value="B"> B. Classes<br>
                                <input type="radio" name="q8" value="C"> C. Constructors<br>
                                <input type="radio" name="q8" value="D"> D. Delegates<br>
                                <button type="button" class="btn btn-info mt-2" onclick="showAnswer(8)">Show Answer</button>
                                <span id="answer8" class="text-success" style="display: none;">Correct Answer: A</span>
                            </div>
                        </li>
                        <li>
                            <h5>Which access modifier makes a class member accessible only within its own class?</h5>
                            <div>
                                <input type="radio" name="q9" value="A"> A. public<br>
                                <input type="radio" name="q9" value="B"> B. protected<br>
                                <input type="radio" name="q9" value="C"> C. private<br>
                                <input type="radio" name="q9" value="D"> D. internal<br>
                                <button type="button" class="btn btn-info mt-2" onclick="showAnswer(9)">Show Answer</button>
                                <span id="answer9" class="text-success" style="display: none;">Correct Answer: C</span>
                            </div>
                        </li>
                        <li>
                            <h5>Which of the following concepts allows treating an instance of a derived class as an instance of its base class?</h5>
                            <div>
                                <input type="radio" name="q10" value="A"> A. Inheritance<br>
                                <input type="radio" name="q10" value="B"> B. Polymorphism<br>
                                <input type="radio" name="q10" value="C"> C. Encapsulation<br>
                                <input type="radio" name="q10" value="D"> D. Overloading<br>
                                <button type="button" class="btn btn-info mt-2" onclick="showAnswer(10)">Show Answer</button>
                                <span id="answer10" class="text-success" style="display: none;">Correct Answer: B</span>
                            </div>
                        </li>
                        <li>
                            <h5>What is the purpose of a destructor in C#?</h5>
                            <div>
                                <input type="radio" name="q11" value="A"> A. To initialize an object<br>
                                <input type="radio" name="q11" value="B"> B. To clean up resources used by an object<br>
                                <input type="radio" name="q11" value="C"> C. To overload a method<br>
                                <input type="radio" name="q11" value="D"> D. To implement multiple inheritance<br>
                                <button type="button" class="btn btn-info mt-2" onclick="showAnswer(11)">Show Answer</button>
                                <span id="answer11" class="text-success" style="display: none;">Correct Answer: B</span>
                            </div>
                        </li>
                        <li>
                            <h5>Which of the following is used to prevent a class from being inherited?</h5>
                            <div>
                                <input type="radio" name="q12" value="A"> A. virtual<br>
                                <input type="radio" name="q12" value="B"> B. sealed<br>
                                <input type="radio" name="q12" value="C"> C. abstract<br>
                                <input type="radio" name="q12" value="D"> D. interface<br>
                                <button type="button" class="btn btn-info mt-2" onclick="showAnswer(12)">Show Answer</button>
                                <span id="answer12" class="text-success" style="display: none;">Correct Answer: B</span>
                            </div>
                        </li>
                        <li>
                            <h5>Which of the following is a correct statement about abstract classes in C#?</h5>
                            <div>
                                <input type="radio" name="q13" value="A"> A. Abstract classes cannot have any methods<br>
                                <input type="radio" name="q13" value="B"> B. Abstract classes cannot have constructors<br>
                                <input type="radio" name="q13" value="C"> C. Abstract classes can contain both abstract and non-abstract methods<br>
                                <input type="radio" name="q13" value="D"> D. Abstract classes must implement all methods from the base class<br>
                                <button type="button" class="btn btn-info mt-2" onclick="showAnswer(13)">Show Answer</button>
                                <span id="answer13" class="text-success" style="display: none;">Correct Answer: C</span>
                            </div>
                        </li>
                        <li>
                            <h5>What is the correct way to declare an interface in C#?</h5>
                            <div>
                                <input type="radio" name="q14" value="A"> A. public interface IMyInterface { }<br>
                                <input type="radio" name="q14" value="B"> B. class IMyInterface { }<br>
                                <input type="radio" name="q14" value="C"> C. public class interface IMyInterface { }<br>
                                <input type="radio" name="q14" value="D"> D. interface public IMyInterface { }<br>
                                <button type="button" class="btn btn-info mt-2" onclick="showAnswer(14)">Show Answer</button>
                                <span id="answer14" class="text-success" style="display: none;">Correct Answer: A</span>
                            </div>
                        </li>
                        <li>
                            <h5>Which of the following concepts allows defining multiple methods with the same name but different parameters?</h5>
                            <div>
                                <input type="radio" name="q15" value="A"> A. Method Overloading<br>
                                <input type="radio" name="q15" value="B"> B. Method Overriding<br>
                                <input type="radio" name="q15" value="C"> C. Encapsulation<br>
                                <input type="radio" name="q15" value="D"> D. Abstraction<br>
                                <button type="button" class="btn btn-info mt-2" onclick="showAnswer(15)">Show Answer</button>
                                <span id="answer15" class="text-success" style="display: none;">Correct Answer: A</span>
                            </div>
                        </li>
                        <li>
                            <h5>What keyword is used to hide a method in the base class in C#?</h5>
                            <div>
                                <input type="radio" name="q16" value="A"> A. override<br>
                                <input type="radio" name="q16" value="B"> B. virtual<br>
                                <input type="radio" name="q16" value="C"> C. new<br>
                                <input type="radio" name="q16" value="D"> D. abstract<br>
                                <button type="button" class="btn btn-info mt-2" onclick="showAnswer(16)">Show Answer</button>
                                <span id="answer16" class="text-success" style="display: none;">Correct Answer: C</span>
                            </div>
                        </li>
                        <li>
                            <h5>Which of the following is NOT true about static methods in C#?</h5>
                            <div>
                                <input type="radio" name="q17" value="A"> A. Static methods belong to the class rather than instances<br>
                                <input type="radio" name="q17" value="B"> B. Static methods can access instance variables directly<br>
                                <input type="radio" name="q17" value="C"> C. Static methods can be called without creating an object<br>
                                <input type="radio" name="q17" value="D"> D. Static methods cannot be overridden<br>
                                <button type="button" class="btn btn-info mt-2" onclick="showAnswer(17)">Show Answer</button>
                                <span id="answer17" class="text-success" style="display: none;">Correct Answer: B</span>
                            </div>
                        </li>
                        <li>
                            <h5>What is method overriding in C#?</h5>
                            <div>
                                <input type="radio" name="q18" value="A"> A. Defining multiple methods with the same name but different parameters<br>
                                <input type="radio" name="q18" value="B"> B. Redefining a base class method in a derived class<br>
                                <input type="radio" name="q18" value="C"> C. Hiding a base class method<br>
                                <input type="radio" name="q18" value="D"> D. Creating a new method with the same name in the same class<br>
                                <button type="button" class="btn btn-info mt-2" onclick="showAnswer(18)">Show Answer</button>
                                <span id="answer18" class="text-success" style="display: none;">Correct Answer: B</span>
                            </div>
                        </li>
                        <li>
                            <h5>What is the main purpose of polymorphism in C#?</h5>
                            <div>
                                <input type="radio" name="q19" value="A"> A. To create classes<br>
                                <input type="radio" name="q19" value="B"> B. To achieve method overloading and overriding<br>
                                <input type="radio" name="q19" value="C"> C. To restrict access to class members<br>
                                <input type="radio" name="q19" value="D"> D. To create abstract classes<br>
                                <button type="button" class="btn btn-info mt-2" onclick="showAnswer(19)">Show Answer</button>
                                <span id="answer19" class="text-success" style="display: none;">Correct Answer: B</span>
                            </div>
                        </li>
                        <li>
                            <h5>Which keyword is used to allow a method to be overridden in a derived class in C#?</h5>
                            <div>
                                <input type="radio" name="q20" value="A"> A. static<br>
                                <input type="radio" name="q20" value="B"> B. override<br>
                                <input type="radio" name="q20" value="C"> C. virtual<br>
                                <input type="radio" name="q20" value="D"> D. abstract<br>
                                <button type="button" class="btn btn-info mt-2" onclick="showAnswer(20)">Show Answer</button>
                                <span id="answer20" class="text-success" style="display: none;">Correct Answer: C</span>
                            </div>
                        </li>
                        

                    <button type="button" class="btn btn-primary mt-3" onclick="submitMCQs()">Submit</button>
                </form>
                <div id="result" class="mt-3" style="display: none;">
                    <h4>Your Score: <span id="score"></span></h4>
                </div>
            </section>
        </div>
    </div>
</div>

<script>
    function showAnswer(qNumber) {
        document.getElementById('answer' + qNumber).style.display = 'inline';
    }

    function submitMCQs() {
        let score = 0;
        let totalQuestions = 20; // Total number of MCQs
        let form = document.getElementById('mcqForm');
        let formData = new FormData(form);

        // Check answer for each question
        if (formData.get('q1') === 'D') score++;
        if (formData.get('q2') === 'A') score++;
        if (formData.get('q3') === 'B') score++;
        if (formData.get('q4') === 'C') score++;
        if (formData.get('q5') === 'B') score++;
        if (formData.get('q6') === 'D') score++;
        if (formData.get('q7') === 'C') score++;
        if (formData.get('q8') === 'A') score++;
        if (formData.get('q9') === 'C') score++;
        if (formData.get('q10') === 'B') score++;
        if (formData.get('q11') === 'B') score++;
        if (formData.get('q12') === 'B') score++;
        if (formData.get('q13') === 'C') score++;
        if (formData.get('q14') === 'A') score++;
        if (formData.get('q15') === 'A') score++;
        if (formData.get('q16') === 'C') score++;
        if (formData.get('q17') === 'B') score++;
        if (formData.get('q18') === 'B') score++;
        if (formData.get('q19') === 'B') score++;
        if (formData.get('q20') === 'C') score++;

        // Display the score
        document.getElementById('score').innerText = score + '/' + totalQuestions;
        document.getElementById('result').style.display = 'block';
    }
</script>
