@{
    ViewData["Title"] = "What is OOP in C# .NET Core";
}

<!-- Content Section -->
<div class="container-fluid mt-3">
    <div class="row">
        <!-- Sidebar remains the same -->
        <div class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
            <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                <h1 class="h2">What is Object-Oriented Programming (OOP) in C# .NET Core?</h1>
            </div>

            <p class="lead">Learn the basics of OOP in C# .NET Core in this beginner-friendly guide!</p>

            <!-- Title Image -->
            <!-- <img src="https://www.tutorialspoint.com/csharp/images/csharp_object_oriented_programming.jpg" class="img-fluid" alt="OOP Concept"> -->

            <section class="mt-5">
                <h2>Introduction to OOP</h2>
                <p>
                    Object-Oriented Programming (OOP) is a programming paradigm that uses "objects" to design software. Objects are instances of classes, which are blueprints for creating entities with attributes (data) and methods (functions).
                    In C# and .NET Core, OOP is one of the most fundamental concepts used to structure code and build robust applications.
                </p>

                <!-- OOP Diagram Image -->
                <!-- <img src="https://cdn.programiz.com/sites/tutorial2program/files/oop-objects.jpg" class="img-fluid" alt="OOP Diagram"> -->
            </section>

            <!-- Core OOP Concepts -->
            <section class="mt-5">
                <h2>Core OOP Concepts in C#</h2>

                <div class="row">
                    <div class="col-md-6">
                        <h3>Encapsulation</h3>
                        <p>Encapsulation is the concept of bundling the data (attributes) and methods (functions) that operate on the data into a single unit or class. It helps protect the data by making it accessible only through methods defined in the class.</p>

                        <!-- Encapsulation Image -->
                        <!-- <img src="https://www.tutorialspoint.com/csharp/images/encapsulation.jpg" class="img-fluid mb-3" alt="Encapsulation Example"> -->

                        <pre class="bg-light p-3">
public class Car {
    private string model;
    public void SetModel(string carModel) {
        model = carModel;
    }
    public string GetModel() {
        return model;
    }
}
                        </pre>
                    </div>

                    <div class="col-md-6">
                        <h3>Inheritance</h3>
                        <p>Inheritance allows one class to inherit the properties and methods of another class. It enables code reusability by allowing you to build upon existing code.</p>

                        <!-- Inheritance Image -->
                        <!-- <img src="https://www.tutorialspoint.com/csharp/images/inheritance.jpg" class="img-fluid mb-3" alt="Inheritance Example"> -->

                        <pre class="bg-light p-3">
public class Vehicle {
    public int Speed { get; set; }
}

public class Car : Vehicle {
    public string Model { get; set; }
}
                        </pre>
                    </div>
                </div>

                <div class="row mt-4">
                    <div class="col-md-6">
                        <h3>Polymorphism</h3>
                        <p>Polymorphism allows methods to have different implementations depending on the object invoking the method. There are two types in C#: compile-time (method overloading) and runtime (method overriding).</p>

                        <!-- Polymorphism Image -->
                        <!-- <img src="https://www.tutorialspoint.com/csharp/images/polymorphism.jpg" class="img-fluid mb-3" alt="Polymorphism Example"> -->

                        <pre class="bg-light p-3">
public class Animal {
    public virtual void Speak() {
        Console.WriteLine("Animal speaks");
    }
}

public class Dog : Animal {
    public override void Speak() {
        Console.WriteLine("Dog barks");
    }
}
                        </pre>
                    </div>

                    <div class="col-md-6">
                        <h3>Abstraction</h3>
                        <p>Abstraction simplifies complex systems by exposing only the essential features and hiding the details. In C#, this is achieved using abstract classes and interfaces.</p>

                        <!-- Abstraction Image -->
                        <!-- <img src="https://www.tutorialspoint.com/csharp/images/abstraction.jpg" class="img-fluid mb-3" alt="Abstraction Example"> -->

                        <pre class="bg-light p-3">
public abstract class Shape {
    public abstract double GetArea();
}

public class Circle : Shape {
    private double radius;
    public Circle(double r) {
        radius = r;
    }
    public override double GetArea() {
        return Math.PI * radius * radius;
    }
}
                        </pre>
                    </div>
                </div>
            </section>

            <!-- Benefits of OOP -->
            <section class="mt-5">
                <h2>Why Use OOP in C# .NET Core?</h2>
                <p>OOP in C# helps developers create applications that are more modular, easier to maintain, and scalable. By organizing code using classes and objects, you can write cleaner and more reusable code. This is especially useful when building large projects in .NET Core.</p>
                <ul>
                    <li><strong>Code Reusability:</strong> Inheritance allows you to reuse existing code.</li>
                    <li><strong>Maintainability:</strong> Encapsulation makes it easier to manage code and data.</li>
                    <li><strong>Scalability:</strong> Object-oriented design allows for more scalable and manageable solutions.</li>
                    <li><strong>Flexibility:</strong> Polymorphism provides flexibility in how you define and call methods.</li>
                </ul>

                <!-- Benefits Image -->
                <!-- <img src="https://miro.medium.com/max/1200/1*bWWs7mlSYYWt5KQ4ow_Ehw.png" class="img-fluid" alt="Benefits of OOP"> -->
            </section>

            <!-- Example: Creating an OOP-Based Application -->
            <section class="mt-5">
                <h2>Example: Building a Simple OOP-Based Application in C#</h2>
                <p>Let's create a simple program to demonstrate OOP in action. We'll build a system where you define a `Person` class and create multiple instances of it.</p>

                <!-- Class Diagram -->
                <!-- <img src="https://d2h0cx97tjks2p.cloudfront.net/s3fs-public/inline-images/csharp-class.png" class="img-fluid mb-3" alt="Class Object Example"> -->

                <pre class="bg-light p-3">
public class Person {
    public string Name { get; set; }
    public int Age { get; set; }

    public void Greet() {
        Console.WriteLine($"Hello, my name is {Name} and I am {Age} years old.");
    }
}

public class Program {
    public static void Main() {
        Person person1 = new Person() { Name = "John", Age = 30 };
        Person person2 = new Person() { Name = "Sarah", Age = 25 };

        person1.Greet();
        person2.Greet();
    }
}
                </pre>
                <p>In this example, we have created a `Person` class that has properties like `Name` and `Age` and a method called `Greet()` to introduce the person.</p>
            </section>

            <!-- Conclusion -->
            <section class="mt-5">
                <h2>Conclusion</h2>
                <p>OOP in C# .NET Core is a powerful approach to building scalable, maintainable applications. By mastering OOP concepts like encapsulation, inheritance, polymorphism, and abstraction, you'll be able to create flexible and efficient software solutions.</p>
            </section>
        </div>
    </div>
</div>
